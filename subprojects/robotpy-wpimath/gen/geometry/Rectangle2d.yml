---

extra_includes:
  - rpy/geometryToString.h
  - wpystruct.h

classes:
  Rectangle2d:
    force_type_casters:
    - units::foot_t
    - units::meter_t
    methods:
      Rectangle2d:
        overloads:
          const Pose2d&, units::meter_t, units::meter_t [constexpr]:
          const Translation2d&, const Translation2d& [constexpr]:
      Center:
      Rotation:
      XWidth:
        ignore: true
      YWidth:
        ignore: true
      TransformBy:
      RotateBy:
      Intersects:
      Contains:
      Distance:
      FindNearestPoint:
      operator==:

inline_code: |
  cls_Rectangle2d
    .def_static("fromFeet", [](const Pose2d& center, units::foot_t xWidth, units::foot_t yWidth) {
      return std::make_unique<Rectangle2d>(center, xWidth, yWidth);
    }, py::arg("center"), py::arg("xWidth"), py::arg("yWidth"))
    .def_property_readonly("xwidth", &Rectangle2d::XWidth)
    .def_property_readonly("ywidth", &Rectangle2d::YWidth)
    .def_property_readonly("xwidth_feet", [](Rectangle2d &self) -> units::foot_t {
      return self.XWidth();
    })
    .def_property_readonly("ywidth_feet", [](Rectangle2d &self) -> units::foot_t {
      return self.YWidth();
    })
    .def("__repr__", py::overload_cast<const Rectangle2d&>(&rpy::toString))
    .def(py::pickle(
      [](const Rectangle2d &self) { // __getstate__
        return py::make_tuple(self.Center(), self.XWidth(), self.YWidth());
      },
      [](py::tuple t) { // __setstate__
        if (t.size() != 3)
          throw std::runtime_error("Invalid state!");
        
        return Rectangle2d(
          t[0].cast<Pose2d>(),
          t[1].cast<units::meter_t>(),
          t[2].cast<units::meter_t>()
        );
      }
    ))
    ;


  SetupWPyStruct<frc::Rectangle2d>(cls_Rectangle2d);