---

extra_includes:
- wpystruct.h

classes:
  Twist2d:
    force_no_default_constructor: true
    shared_ptr: false
    attributes:
      dx:
      dy:
      dtheta:
    methods:
      operator==:
      operator!=:
      operator*:
      

inline_code: |
  cls_Twist2d
    .def(
      py::init<units::meter_t, units::meter_t, units::radian_t>(),
      py::arg("dx") = 0, py::arg("dy") = 0, py::arg("dtheta") = 0
    )
    .def_static("fromFeet", [](units::foot_t dx, units::foot_t dy, units::radian_t dtheta){
      return Twist2d{dx, dy, dtheta};
    }, py::arg("dx") = 0, py::arg("dy") = 0, py::arg("dtheta") = 0)
    .def_property("dx_feet", 
      [](Twist2d * self) -> units::foot_t {
        return self->dx;
      },
      [](Twist2d * self, units::foot_t dx) {
        self->dx = dx;
      }
    )
    .def_property("dy_feet", 
      [](Twist2d * self) -> units::foot_t {
        return self->dy;
      },
      [](Twist2d * self, units::foot_t dy) {
        self->dy = dy;
      }
    )
    .def_property("dtheta_degrees", 
      [](Twist2d * self) -> units::degree_t {
        return self->dtheta;
      },
      [](Twist2d * self, units::degree_t dtheta) {
        self->dtheta = dtheta;
      }
    )
    .def("__repr__", [](const Twist2d &tw) -> std::string {
      return "Twist2d(dx=" + std::to_string(tw.dx()) + ", "
                     "dy=" + std::to_string(tw.dy()) + ", "
                     "dtheta=" + std::to_string(tw.dtheta()) + ")";
    })
    .def(py::pickle(
        [](const Twist2d &tw) { // __getstate__
            return py::make_tuple(tw.dx(), tw.dy(), tw.dtheta());
        },
        [](py::tuple t) { // __setstate__
            if (t.size() != 3)
                throw std::runtime_error("Invalid state!");
            
            return Twist2d(
              t[0].cast<units::meter_t>(),
              t[1].cast<units::meter_t>(),
              t[2].cast<units::radian_t>()
            );
        }
    ))
  ;

  SetupWPyStruct<frc::Twist2d>(cls_Twist2d);
