---

extra_includes:
  - rpy/geometryToString.h
  - wpystruct.h

classes:
  Ellipse2d:
    force_type_casters:
    - units::foot_t
    - units::meter_t
    methods:
      Ellipse2d:
        overloads:
          const Pose2d&, units::meter_t, units::meter_t [constexpr]:
          const Translation2d&, double [constexpr]:
      Center:
      Rotation:
      XSemiAxis:
        ignore: true
      YSemiAxis:
        ignore: true
      FocalPoints:
      TransformBy:
      RotateBy:
      Intersects:
      Contains:
      Distance:
      FindNearestPoint:
      operator==:

inline_code: |
  cls_Ellipse2d
    .def_static("fromFeet", [](const Pose2d& center, units::foot_t xSemiAxis, units::foot_t ySemiAxis) {
      return std::make_unique<Ellipse2d>(center, xSemiAxis, ySemiAxis);
    }, py::arg("center"), py::arg("xSemiAxis"), py::arg("ySemiAxis"))
    .def_property_readonly("xsemiaxis", &Ellipse2d::XSemiAxis)
    .def_property_readonly("ysemiaxis", &Ellipse2d::YSemiAxis)
    .def_property_readonly("xsemiaxis_feet", [](Ellipse2d &self) -> units::foot_t {
      return self.XSemiAxis();
    })
    .def_property_readonly("ysemiaxis_feet", [](Ellipse2d &self) -> units::foot_t {
      return self.YSemiAxis();
    })
    .def("__repr__", py::overload_cast<const Ellipse2d&>(&rpy::toString))
    .def(py::pickle(
        [](const Ellipse2d &self) { // __getstate__
            return py::make_tuple(self.Center(), self.XSemiAxis(), self.YSemiAxis());
        },
        [](py::tuple t) { // __setstate__
            if (t.size() != 3)
                throw std::runtime_error("Invalid state!");
            
            return Ellipse2d(
              t[0].cast<Pose2d>(),
              t[1].cast<units::meter_t>(),
              t[2].cast<units::meter_t>()
            );
        }
    ))
    ;


  SetupWPyStruct<frc::Ellipse2d>(cls_Ellipse2d);