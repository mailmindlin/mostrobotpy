---

extra_includes:
- frc/geometry/Pose2d.h
- rpy/geometryToString.h
- wpystruct.h

classes:
  Transform2d:
    shared_ptr: false
    force_type_casters:
    - units::foot_t
    - units::meter_t
    - units::radian_t
    methods:
      Transform2d:
        overloads:
          Pose2d, Pose2d:
          Translation2d, Rotation2d [constexpr]:
          units::meter_t, units::meter_t, Rotation2d [constexpr]:
          '[constexpr]':
      Translation:
      Rotation:
      X:
      Y:
      Inverse:
      operator*:
      operator/:
      operator==:
      operator!=:
      operator+:

inline_code: |
  cls_Transform2d
    .def_static("fromFeet", [](units::foot_t x, units::foot_t y, units::radian_t angle){
      return std::make_unique<Transform2d>(Translation2d(x, y), Rotation2d(angle));
    }, py::arg("x"), py::arg("y"), py::arg("angle"))
    .def(py::init([](units::meter_t x, units::meter_t y, units::radian_t angle) {
      return std::make_unique<Transform2d>(Translation2d(x, y), Rotation2d(angle));
    }), py::arg("x"), py::arg("y"), py::arg("angle"))
    .def_property_readonly("x", &Transform2d::X)
    .def_property_readonly("y", &Transform2d::Y)
    .def_property_readonly("x_feet", [](Transform2d * self) -> units::foot_t {
      return self->X();
    })
    .def_property_readonly("y_feet", [](Transform2d * self) -> units::foot_t {
      return self->Y();
    })
    .def("__repr__", py::overload_cast<const Transform2d&>(&rpy::toString))
    .def(py::pickle(
        [](const Transform2d &self) { // __getstate__
            return py::make_tuple(self.X(), self.Y(), self.Rotation().Radians());
        },
        [](py::tuple t) { // __setstate__
            if (t.size() != 3)
                throw std::runtime_error("Invalid state!");
            
            return Transform2d(
              t[0].cast<units::meter_t>(),
              t[1].cast<units::meter_t>(),
              t[2].cast<units::radian_t>()
            );
        }
    ))
  ;

  SetupWPyStruct<frc::Transform2d>(cls_Transform2d);
